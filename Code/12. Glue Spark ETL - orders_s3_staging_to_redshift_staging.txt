import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue import DynamicFrame

args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Script generated for node Data Catalog table
DataCatalogtable_node1 = glueContext.create_dynamic_frame.from_catalog(
    database="ecommerce-database",
    table_name="staging_orders",
    transformation_ctx="DataCatalogtable_node1",
)

# Script generated for node Change Schema
ChangeSchema_node2 = ApplyMapping.apply(
    frame=DataCatalogtable_node1,
    mappings=[
        ("run_id", "int", "run_id", "int"),
        ("order_id", "string", "order_id", "string"),
        ("customer_id", "string", "customer_id", "string"),
        ("seller_id", "string", "seller_id", "string"),
        ("product_code", "string", "product_code", "string"),
        ("product_name", "string", "product_name", "string"),
        ("product_price", "int", "product_price", "int"),
        ("product_qty", "int", "product_qty", "int"),
        (
            "order_purchase_timestamp",
            "timestamp",
            "order_purchase_timestamp",
            "timestamp",
        ),
        ("processing_timestamp", "timestamp", "processing_timestamp", "timestamp"),
    ],
    transformation_ctx="ChangeSchema_node2",
)

# Script generated for node Amazon Redshift
AmazonRedshift_node3 = glueContext.write_dynamic_frame.from_options(
    frame=ChangeSchema_node2,
    connection_type="redshift",
    connection_options={
        "redshiftTmpDir": "s3://aws-glue-assets-100163808729-us-east-1/temporary/",
        "useConnectionProperties": "true",
        "dbtable": "ecommerce_staging.orders",
        "connectionName": "ecommerce-redshift-cluster-connection",
        "preactions": "CREATE TABLE IF NOT EXISTS ecommerce_staging.orders (run_id INTEGER, order_id VARCHAR, customer_id VARCHAR, seller_id VARCHAR, product_code VARCHAR, product_name VARCHAR, product_price INTEGER, product_qty INTEGER, order_purchase_timestamp TIMESTAMP, processing_timestamp TIMESTAMP);",
    },
    transformation_ctx="AmazonRedshift_node3",
)

job.commit()
