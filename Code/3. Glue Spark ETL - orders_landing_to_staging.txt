import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.dynamicframe import DynamicFrame
from awsglue.job import Job

from pyspark.sql.functions import col
from pyspark.sql.functions import explode

args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Script generated for node S3 bucket
S3bucket_node1 = glueContext.create_dynamic_frame.from_catalog(
    database="ecommerce-database",
    table_name="orders",
    transformation_ctx="S3bucket_node1",
)

# print('hoooooooooooooooooooooooooooooooooy')
# print(S3bucket_node1.toDF().count())

if S3bucket_node1.toDF().count() > 0:

    # Script generated for node ApplyMapping
    ApplyMapping_node2 = ApplyMapping.apply(
        frame=S3bucket_node1,
        mappings=[
            ("run_id", "int", "run_id", "int"),
            ("order_id", "string", "order_id", "string"),
            ("customer_id", "string", "customer_id", "string"),
            ("seller_id", "string", "seller_id", "string"),
            ("products", "array", "products", "array"),
            ("order_purchase_timestamp","timestamp", "order_purchase_timestamp", "timestamp"),
            ("processing_timestamp", "timestamp", "processing_timestamp", "timestamp"),
            ("year", "string", "year", "string"),
            ("month", "string", "month", "string"),
            ("day", "string", "day", "string"),
            ("hour", "string", "hour", "string"),
        ],
        transformation_ctx="ApplyMapping_node2",
    )
    
    df1 = DynamicFrame.toDF(ApplyMapping_node2)
    
    df2 = df1.withColumn('exploded_products', explode('products'))
    
    df3 = df2.withColumn('product_code', col('exploded_products.product_code')) \
             .withColumn('product_name', col('exploded_products.product_name')) \
             .withColumn('product_price',col('exploded_products.product_price')) \
             .withColumn('product_qty', col('exploded_products.product_qty'))
             
    df4 = df3.select('run_id', 'order_id', 'customer_id', 'seller_id', 'product_code', 'product_name', 'product_price', 'product_qty', 'order_purchase_timestamp', 'processing_timestamp', 'year', 'month', 'day', 'hour')
    
    df5 = DynamicFrame.fromDF(df4, glueContext, "df")
    
    # Script generated for node S3 bucket
    S3bucket_node3 = glueContext.write_dynamic_frame.from_options(
        frame=df5,
        connection_type="s3",
        format="glueparquet",
        connection_options={
            "path": "s3://fo-to-dw-orders-staging-area/orders/",
            "partitionKeys": ["year", "month", "day", "hour"],
        },
        format_options={"compression": "snappy"},
        transformation_ctx="S3bucket_node3",
    )
    
    job.commit()
    
else:
    
    job.commit()
